/* The following code was generated by JFlex 1.6.1 */

package analisador;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/jairo/Documents/NetBeansProjects/Analisador/src/analisador/LexicoVisualg.flex</tt>
 */
public class LexicoVisualg {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\41"+
    "\2\0\1\47\4\0\1\44\1\42\1\0\1\43\1\6\1\4\12\5"+
    "\2\0\1\51\1\52\1\50\2\0\4\7\1\36\10\7\1\40\1\37"+
    "\13\7\1\0\1\45\1\0\1\46\2\0\1\10\1\17\1\23\1\31"+
    "\1\12\1\34\1\21\1\32\1\16\2\7\1\11\1\22\1\24\1\14"+
    "\1\30\1\25\1\15\1\20\1\13\1\26\1\27\1\7\1\33\1\7"+
    "\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\23\5\1\6"+
    "\2\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\21\5\1\24"+
    "\14\5\1\24\5\5\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\5\5\1\24\12\5\1\24\1\5\1\24\21\5"+
    "\1\32\15\5\1\24\103\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\126\0\126\0\254\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0102\0\u0433\0\u045e\0\126\0\126"+
    "\0\126\0\126\0\126\0\126\0\126\0\u0489\0\u04b4\0\126"+
    "\0\u04df\0\126\0\327\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0102\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0102"+
    "\0\u0aeb\0\126\0\126\0\126\0\126\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0c6e"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1"+
    "\0\u10cc\0\u0102\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
    "\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e"+
    "\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886"+
    "\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36"+
    "\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e"+
    "\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6"+
    "\0\u1e11\0\u1e3c\0\u1e67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\11\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\11\1\27\1\30"+
    "\1\31\1\11\1\32\1\33\1\11\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\2\3\36\51\1\52\3\51\1\3"+
    "\5\51\55\0\1\5\55\0\1\7\1\53\51\0\1\53"+
    "\52\0\1\11\1\0\32\11\17\0\1\11\1\0\2\11"+
    "\1\54\3\11\1\55\1\11\1\56\1\57\20\11\17\0"+
    "\1\11\1\0\3\11\1\60\1\11\1\61\1\11\1\62"+
    "\22\11\17\0\1\11\1\0\11\11\1\63\2\11\1\64"+
    "\1\65\6\11\1\66\5\11\17\0\1\11\1\0\1\11"+
    "\1\67\5\11\1\70\22\11\17\0\1\11\1\0\17\11"+
    "\1\71\12\11\17\0\1\11\1\0\1\11\1\72\1\11"+
    "\1\73\26\11\17\0\1\11\1\0\15\11\1\74\14\11"+
    "\17\0\1\11\1\0\3\11\1\75\26\11\17\0\1\11"+
    "\1\0\6\11\1\76\23\11\17\0\1\11\1\0\1\11"+
    "\1\77\1\11\1\100\3\11\1\101\22\11\17\0\1\11"+
    "\1\0\1\11\1\102\3\11\1\103\1\104\23\11\17\0"+
    "\1\11\1\0\17\11\1\105\12\11\17\0\1\11\1\0"+
    "\17\11\1\106\12\11\17\0\1\11\1\0\3\11\1\107"+
    "\26\11\17\0\1\11\1\0\1\11\1\110\3\11\1\56"+
    "\1\111\1\112\22\11\17\0\1\11\1\0\3\11\1\113"+
    "\26\11\17\0\1\11\1\0\5\11\1\114\24\11\17\0"+
    "\1\11\1\0\1\11\1\115\5\11\1\116\7\11\1\117"+
    "\12\11\17\0\1\11\1\0\17\11\1\120\12\11\17\0"+
    "\1\11\1\0\1\11\1\121\30\11\64\0\1\122\43\0"+
    "\1\123\4\0\1\124\1\0\1\125\1\51\2\0\36\51"+
    "\1\0\3\51\1\0\5\51\5\0\1\11\1\0\3\11"+
    "\1\126\6\11\1\127\17\11\17\0\1\11\1\0\14\11"+
    "\1\130\1\11\1\131\13\11\17\0\1\11\1\0\11\11"+
    "\1\112\20\11\17\0\1\11\1\0\14\11\1\112\15\11"+
    "\17\0\1\11\1\0\7\11\1\132\22\11\17\0\1\11"+
    "\1\0\12\11\1\133\17\11\17\0\1\11\1\0\4\11"+
    "\1\134\25\11\17\0\1\11\1\0\14\11\1\135\15\11"+
    "\17\0\1\11\1\0\5\11\1\112\24\11\17\0\1\11"+
    "\1\0\4\11\1\136\11\11\1\137\13\11\17\0\1\11"+
    "\1\0\21\11\1\112\10\11\17\0\1\11\1\0\15\11"+
    "\1\112\14\11\17\0\1\11\1\0\13\11\1\140\16\11"+
    "\17\0\1\11\1\0\4\11\1\141\25\11\17\0\1\11"+
    "\1\0\7\11\1\142\5\11\1\143\4\11\1\144\7\11"+
    "\17\0\1\11\1\0\21\11\1\145\10\11\17\0\1\11"+
    "\1\0\4\11\1\146\2\11\1\147\22\11\17\0\1\11"+
    "\1\0\15\11\1\150\14\11\17\0\1\11\1\0\1\11"+
    "\1\151\30\11\17\0\1\11\1\0\7\11\1\152\22\11"+
    "\17\0\1\11\1\0\15\11\1\153\14\11\17\0\1\11"+
    "\1\0\15\11\1\152\14\11\17\0\1\11\1\0\6\11"+
    "\1\154\2\11\1\64\20\11\17\0\1\11\1\0\4\11"+
    "\1\155\4\11\1\112\1\11\1\156\5\11\1\60\10\11"+
    "\17\0\1\11\1\0\5\11\1\157\24\11\17\0\1\11"+
    "\1\0\13\11\1\160\16\11\17\0\1\11\1\0\1\11"+
    "\1\161\30\11\17\0\1\11\1\0\6\11\1\162\23\11"+
    "\17\0\1\11\1\0\6\11\1\132\2\11\1\163\5\11"+
    "\1\164\12\11\17\0\1\11\1\0\5\11\1\165\24\11"+
    "\17\0\1\11\1\0\10\11\1\166\3\11\1\167\15\11"+
    "\17\0\1\11\1\0\17\11\1\112\12\11\17\0\1\11"+
    "\1\0\2\11\1\163\11\11\1\132\15\11\17\0\1\11"+
    "\1\0\13\11\1\170\16\11\17\0\1\11\1\0\15\11"+
    "\1\171\14\11\17\0\1\11\1\0\5\11\1\172\24\11"+
    "\17\0\1\11\1\0\1\11\1\173\30\11\17\0\1\11"+
    "\1\0\5\11\1\174\24\11\17\0\1\11\1\0\4\11"+
    "\1\155\4\11\1\175\2\11\1\176\15\11\17\0\1\11"+
    "\1\0\17\11\1\177\12\11\17\0\1\11\1\0\1\11"+
    "\1\112\30\11\17\0\1\11\1\0\7\11\1\200\5\11"+
    "\1\112\14\11\17\0\1\11\1\0\3\11\1\201\26\11"+
    "\17\0\1\11\1\0\5\11\1\202\1\203\23\11\17\0"+
    "\1\11\1\0\1\11\1\64\30\11\17\0\1\11\1\0"+
    "\17\11\1\204\12\11\17\0\1\11\1\0\3\11\1\205"+
    "\26\11\17\0\1\11\1\0\6\11\1\206\23\11\17\0"+
    "\1\11\1\0\26\11\1\207\3\11\17\0\1\11\1\0"+
    "\22\11\1\210\7\11\17\0\1\11\1\0\21\11\1\211"+
    "\10\11\17\0\1\11\1\0\7\11\1\212\22\11\17\0"+
    "\1\11\1\0\3\11\1\213\26\11\17\0\1\11\1\0"+
    "\14\11\1\214\15\11\17\0\1\11\1\0\17\11\1\215"+
    "\12\11\17\0\1\11\1\0\17\11\1\216\12\11\17\0"+
    "\1\11\1\0\11\11\1\217\20\11\17\0\1\11\1\0"+
    "\1\11\1\220\30\11\17\0\1\11\1\0\1\11\1\67"+
    "\30\11\17\0\1\11\1\0\21\11\1\205\10\11\17\0"+
    "\1\11\1\0\15\11\1\221\14\11\17\0\1\11\1\0"+
    "\3\11\1\222\15\11\1\223\10\11\17\0\1\11\1\0"+
    "\22\11\1\112\7\11\17\0\1\11\1\0\22\11\1\224"+
    "\7\11\17\0\1\11\1\0\11\11\1\64\20\11\17\0"+
    "\1\11\1\0\11\11\1\132\20\11\17\0\1\11\1\0"+
    "\14\11\1\225\15\11\17\0\1\11\1\0\17\11\1\226"+
    "\12\11\17\0\1\11\1\0\2\11\1\227\27\11\17\0"+
    "\1\11\1\0\1\11\1\230\1\11\1\231\2\11\1\232"+
    "\2\11\1\233\7\11\1\234\3\11\1\235\4\11\17\0"+
    "\1\11\1\0\14\11\1\136\15\11\17\0\1\11\1\0"+
    "\4\11\1\236\25\11\17\0\1\11\1\0\6\11\1\237"+
    "\23\11\17\0\1\11\1\0\3\11\1\67\26\11\17\0"+
    "\1\11\1\0\5\11\1\56\24\11\17\0\1\11\1\0"+
    "\7\11\1\240\22\11\17\0\1\11\1\0\14\11\1\64"+
    "\15\11\17\0\1\11\1\0\6\11\1\241\23\11\17\0"+
    "\1\11\1\0\2\11\1\242\27\11\17\0\1\11\1\0"+
    "\3\11\1\243\26\11\17\0\1\11\1\0\1\11\1\244"+
    "\30\11\17\0\1\11\1\0\6\11\1\112\23\11\17\0"+
    "\1\11\1\0\5\11\1\245\24\11\17\0\1\11\1\0"+
    "\16\11\1\112\13\11\17\0\1\11\1\0\7\11\1\112"+
    "\22\11\17\0\1\11\1\0\12\11\1\246\17\11\17\0"+
    "\1\11\1\0\4\11\1\132\25\11\17\0\1\11\1\0"+
    "\6\11\1\247\23\11\17\0\1\11\1\0\7\11\1\64"+
    "\22\11\17\0\1\11\1\0\21\11\1\250\10\11\17\0"+
    "\1\11\1\0\11\11\1\57\20\11\17\0\1\11\1\0"+
    "\1\11\1\251\30\11\17\0\1\11\1\0\14\11\1\252"+
    "\15\11\17\0\1\11\1\0\5\11\1\253\24\11\17\0"+
    "\1\11\1\0\6\11\1\254\23\11\17\0\1\11\1\0"+
    "\14\11\1\255\15\11\17\0\1\11\1\0\1\11\1\256"+
    "\30\11\17\0\1\11\1\0\3\11\1\257\26\11\17\0"+
    "\1\11\1\0\12\11\1\112\17\11\17\0\1\11\1\0"+
    "\1\11\1\260\30\11\17\0\1\11\1\0\2\11\1\261"+
    "\27\11\17\0\1\11\1\0\11\11\1\262\3\11\1\263"+
    "\14\11\17\0\1\11\1\0\3\11\1\73\26\11\17\0"+
    "\1\11\1\0\3\11\1\112\26\11\17\0\1\11\1\0"+
    "\1\11\1\264\4\11\1\111\23\11\17\0\1\11\1\0"+
    "\17\11\1\117\12\11\17\0\1\11\1\0\5\11\1\265"+
    "\24\11\17\0\1\11\1\0\7\11\1\266\22\11\17\0"+
    "\1\11\1\0\20\11\1\64\11\11\17\0\1\11\1\0"+
    "\1\11\1\267\30\11\17\0\1\11\1\0\23\11\1\132"+
    "\6\11\17\0\1\11\1\0\20\11\1\132\11\11\17\0"+
    "\1\11\1\0\15\11\1\270\14\11\17\0\1\11\1\0"+
    "\14\11\1\271\15\11\17\0\1\11\1\0\6\11\1\272"+
    "\23\11\17\0\1\11\1\0\6\11\1\273\23\11\17\0"+
    "\1\11\1\0\6\11\1\106\23\11\17\0\1\11\1\0"+
    "\12\11\1\274\17\11\17\0\1\11\1\0\4\11\1\140"+
    "\25\11\17\0\1\11\1\0\13\11\1\275\16\11\17\0"+
    "\1\11\1\0\7\11\1\200\22\11\17\0\1\11\1\0"+
    "\1\11\1\276\30\11\17\0\1\11\1\0\22\11\1\277"+
    "\7\11\17\0\1\11\1\0\22\11\1\300\7\11\17\0"+
    "\1\11\1\0\6\11\1\233\23\11\17\0\1\11\1\0"+
    "\12\11\1\127\17\11\17\0\1\11\1\0\14\11\1\301"+
    "\15\11\17\0\1\11\1\0\16\11\1\137\13\11\17\0"+
    "\1\11\1\0\6\11\1\132\23\11\17\0\1\11\1\0"+
    "\6\11\1\214\23\11\17\0\1\11\1\0\4\11\1\302"+
    "\25\11\17\0\1\11\1\0\2\11\1\112\27\11\17\0"+
    "\1\11\1\0\4\11\1\64\25\11\17\0\1\11\1\0"+
    "\1\11\1\163\30\11\17\0\1\11\1\0\1\11\1\114"+
    "\30\11\17\0\1\11\1\0\5\11\1\303\24\11\17\0"+
    "\1\11\1\0\3\11\1\304\26\11\17\0\1\11\1\0"+
    "\3\11\1\305\26\11\17\0\1\11\1\0\6\11\1\306"+
    "\23\11\17\0\1\11\1\0\3\11\1\307\26\11\17\0"+
    "\1\11\1\0\7\11\1\310\22\11\17\0\1\11\1\0"+
    "\5\11\1\202\24\11\17\0\1\11\1\0\13\11\1\64"+
    "\16\11\17\0\1\11\1\0\13\11\1\311\16\11\17\0"+
    "\1\11\1\0\13\11\1\112\16\11\17\0\1\11\1\0"+
    "\4\11\1\312\25\11\17\0\1\11\1\0\1\11\1\57"+
    "\30\11\17\0\1\11\1\0\7\11\1\312\22\11\17\0"+
    "\1\11\1\0\13\11\1\313\16\11\17\0\1\11\1\0"+
    "\21\11\1\132\10\11\17\0\1\11\1\0\6\11\1\64"+
    "\23\11\17\0\1\11\1\0\3\11\1\244\26\11\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7826];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\30\1\7\11\2\1\1\11"+
    "\1\1\1\11\47\1\4\11\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Token token(Token.T type){
        return new Token(type, yyline, yycolumn);
    }

    private Token token(Token.T type, Object val){
        return new Token(type, val, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoVisualg(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(Token.T.ERRO);
            }
          case 27: break;
          case 2: 
            { 
            }
          case 28: break;
          case 3: 
            { return token(Token.T.DIVISAO);
            }
          case 29: break;
          case 4: 
            { return token(Token.T.INTEIRO, new Integer(yytext()));
            }
          case 30: break;
          case 5: 
            { return token(Token.T.ID, yytext());
            }
          case 31: break;
          case 6: 
            { return token(Token.T.MULTLOGICA);
            }
          case 32: break;
          case 7: 
            { string.setLength(0); yybegin(LITERAL);
            }
          case 33: break;
          case 8: 
            { return token(Token.T.SOMA);
            }
          case 34: break;
          case 9: 
            { return token(Token.T.SUBTRACAO);
            }
          case 35: break;
          case 10: 
            { return token(Token.T.MULTIPLICACAO);
            }
          case 36: break;
          case 11: 
            { return token(Token.T.DIVISAOINTEIRA);
            }
          case 37: break;
          case 12: 
            { return token(Token.T.EXPONENCIACAO);
            }
          case 38: break;
          case 13: 
            { return token(Token.T.MODULO);
            }
          case 39: break;
          case 14: 
            { return token(Token.T.MAIOR);
            }
          case 40: break;
          case 15: 
            { return token(Token.T.MENOR);
            }
          case 41: break;
          case 16: 
            { return token(Token.T.IGUAL);
            }
          case 42: break;
          case 17: 
            { string.append( yytext() );
            }
          case 43: break;
          case 18: 
            { yybegin(YYINITIAL);
                    return token(Token.T.LITERAL,
                    string.toString());
            }
          case 44: break;
          case 19: 
            { return token(Token.T.REAL, new Double(yytext()));
            }
          case 45: break;
          case 20: 
            { return token(Token.T.RESERVADA, yytext());
            }
          case 46: break;
          case 21: 
            { return token(Token.T.ADICLOGICA);
            }
          case 47: break;
          case 22: 
            { return token(Token.T.MAIORIGUAL);
            }
          case 48: break;
          case 23: 
            { return token(Token.T.ATRIBUICAO);
            }
          case 49: break;
          case 24: 
            { return token(Token.T.DIFERENTE);
            }
          case 50: break;
          case 25: 
            { return token(Token.T.MENORIGUAL);
            }
          case 51: break;
          case 26: 
            { return token(Token.T.NEGACAO);
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
